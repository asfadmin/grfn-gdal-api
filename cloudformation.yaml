AWSTemplateFormatVersion: 2010-09-09

Parameters:

  LogBucket:
    Type: String

  LogPrefix:
    Type: String
    Default: aws-s3-access/

  StorageExpirationInDays:
    Type: Number
    MinValue: 1
    Default: 7

Outputs:

  ApiEndpoint:
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"

Resources:

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref AWS::StackName
      LifecycleConfiguration:
        Rules:
        - Status: Enabled
          AbortIncompleteMultipartUpload:
            DaysAfterInitiation: 1
        - Status: Enabled
          ExpirationInDays: !Ref StorageExpirationInDays
      LoggingConfiguration:
        DestinationBucketName: !Ref LogBucket
        LogFilePrefix: !Sub "${LogPrefix}${AWS::StackName}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: "*"
          Action: s3:GetObject
          Resource: !Sub "${Bucket.Arn}/*"

  SubsetStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        Name: !Sub "${AWS::StackName}-subset"
        Bucket: !Ref Bucket
      TemplateURL: subset/cloudformation.yaml

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref AWS::StackName
      Body:
        openapi: 3.0.0
        info:
          title: gdal-api
          version: 0.0.1
        paths:
          /:
            get:
              responses:
                "200":
                  description: "200 response"
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
        components:
          schemas:
            Empty:
              title: "Empty Schema"
              type: "object"

  Deployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestApi

  Stage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: gdal
      RestApiId: !Ref RestApi
      DeploymentId: !Ref Deployment

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SubsetStack.Outputs.LambdaArn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*"
